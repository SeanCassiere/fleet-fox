/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as LoginIndexImport } from './routes/login.index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as PublicPostsImport } from './routes/_public/posts'
import { Route as PublicPostsIndexImport } from './routes/_public/posts.index'
import { Route as PublicPostsPostIdImport } from './routes/_public/posts.$postId'
import { Route as PublicPostsPostIdDeepImport } from './routes/_public/posts_.$postId.deep'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const PublicPostsRoute = PublicPostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => PublicRoute,
} as any)

const PublicPostsIndexRoute = PublicPostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicPostsRoute,
} as any)

const PublicPostsPostIdRoute = PublicPostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PublicPostsRoute,
} as any)

const PublicPostsPostIdDeepRoute = PublicPostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => PublicRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_public/posts': {
      id: '/_public/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PublicPostsImport
      parentRoute: typeof PublicImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/_public/posts/$postId': {
      id: '/_public/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PublicPostsPostIdImport
      parentRoute: typeof PublicPostsImport
    }
    '/_public/posts/': {
      id: '/_public/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PublicPostsIndexImport
      parentRoute: typeof PublicPostsImport
    }
    '/_public/posts_/$postId/deep': {
      id: '/_public/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PublicPostsPostIdDeepImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface PublicPostsRouteChildren {
  PublicPostsPostIdRoute: typeof PublicPostsPostIdRoute
  PublicPostsIndexRoute: typeof PublicPostsIndexRoute
}

const PublicPostsRouteChildren: PublicPostsRouteChildren = {
  PublicPostsPostIdRoute: PublicPostsPostIdRoute,
  PublicPostsIndexRoute: PublicPostsIndexRoute,
}

const PublicPostsRouteWithChildren = PublicPostsRoute._addFileChildren(
  PublicPostsRouteChildren,
)

interface PublicRouteChildren {
  PublicPostsRoute: typeof PublicPostsRouteWithChildren
  PublicIndexRoute: typeof PublicIndexRoute
  PublicPostsPostIdDeepRoute: typeof PublicPostsPostIdDeepRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicPostsRoute: PublicPostsRouteWithChildren,
  PublicIndexRoute: PublicIndexRoute,
  PublicPostsPostIdDeepRoute: PublicPostsPostIdDeepRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteRouteWithChildren
  '': typeof PublicRouteWithChildren
  '/posts': typeof PublicPostsRouteWithChildren
  '/': typeof PublicIndexRoute
  '/app/': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
  '/posts/$postId': typeof PublicPostsPostIdRoute
  '/posts/': typeof PublicPostsIndexRoute
  '/posts/$postId/deep': typeof PublicPostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/': typeof PublicIndexRoute
  '/app': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
  '/posts/$postId': typeof PublicPostsPostIdRoute
  '/posts': typeof PublicPostsIndexRoute
  '/posts/$postId/deep': typeof PublicPostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_public/posts': typeof PublicPostsRouteWithChildren
  '/_public/': typeof PublicIndexRoute
  '/app/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
  '/_public/posts/$postId': typeof PublicPostsPostIdRoute
  '/_public/posts/': typeof PublicPostsIndexRoute
  '/_public/posts_/$postId/deep': typeof PublicPostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | ''
    | '/posts'
    | '/'
    | '/app/'
    | '/login'
    | '/posts/$postId'
    | '/posts/'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/login'
    | '/posts/$postId'
    | '/posts'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/app'
    | '/_public'
    | '/_public/posts'
    | '/_public/'
    | '/app/'
    | '/login/'
    | '/_public/posts/$postId'
    | '/_public/posts/'
    | '/_public/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app",
        "/_public",
        "/login/"
      ]
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/posts",
        "/_public/",
        "/_public/posts_/$postId/deep"
      ]
    },
    "/_public/posts": {
      "filePath": "_public/posts.tsx",
      "parent": "/_public",
      "children": [
        "/_public/posts/$postId",
        "/_public/posts/"
      ]
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/login/": {
      "filePath": "login.index.tsx"
    },
    "/_public/posts/$postId": {
      "filePath": "_public/posts.$postId.tsx",
      "parent": "/_public/posts"
    },
    "/_public/posts/": {
      "filePath": "_public/posts.index.tsx",
      "parent": "/_public/posts"
    },
    "/_public/posts_/$postId/deep": {
      "filePath": "_public/posts_.$postId.deep.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
